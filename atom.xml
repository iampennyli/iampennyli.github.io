<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PennyLi</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://penny.li/"/>
  <updated>2016-04-19T12:22:55.000Z</updated>
  <id>http://penny.li/</id>
  
  <author>
    <name>pennyli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IPA多Target重签名以及自动修改Bundle ID</title>
    <link href="http://penny.li/2016/04/19/resign_ipa/"/>
    <id>http://penny.li/2016/04/19/resign_ipa/</id>
    <published>2016-04-19T12:05:13.000Z</published>
    <updated>2016-04-19T12:22:55.000Z</updated>
    
    <content type="html">&lt;p&gt;日常iOS开发都会遇到这样的需求，如何通过脚本动态修改IPA的Bundle ID从而实现一机多包呢？实际上现在很多开源的App已经可以满足这样的需求，比如&lt;a href=&quot;https://github.com/maciekish/iReSign&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iReSign&lt;/a&gt;，或者如果你愿意付费的话甚至可以购买拥有漂亮GUI的&lt;a href=&quot;https://www.airsignapp.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AirSign&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;AirSign没有用过，但是iReSign只支持单Target，意思就是你的iPA不能拥有任何Extension,比如Widget，Share,或者Watch等，并且iReSign使用起来需要指定Entitlements这样的文件，如果你是个新手或者对签名打包没有太多经验的开发GGMM，你肯定会问Entitlements是个什么鬼! 所以如果你只是想快速解决你的打包重签问题的话，这篇文章可以帮到你。&lt;/p&gt;
&lt;p&gt;##准备&lt;/p&gt;
&lt;p&gt;在重签之前，你需要准备除了iPA之外的两个东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;证书&lt;/li&gt;
&lt;li&gt;每个Target对应的Provisioning Profiles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证书可以通过Mac自带&lt;strong&gt;钥匙串.app&lt;/strong&gt;查看是否有安装，&lt;strong&gt;Provisioning Profile&lt;/strong&gt;可以通过&lt;a href=&quot;https://developer.apple.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apple Member Center&lt;/a&gt;创建并生成。如果你的iPA拥有多个Target，那么就需要为每个Target生成对应的Profile。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##步骤&lt;/p&gt;
&lt;p&gt;###解压iPA&lt;br&gt;iPA实际上是压缩的格式，你可以把他理解成zip格式&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;unzip -q $IPA_PATH $TMP_PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;###替换Provisioning Profiles&lt;br&gt;打开解压的包可以看到&lt;strong&gt;embedded.mobileprovision&lt;/strong&gt;这样的文件，这个就是原始的打包Provisioning Profile,现在使用新生成的Profile来替换原始的。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cp $PROFILE_PATH/IPA_NEW_PROFILE.mobileprovision $TMP_PATH/Payload/mttlite.app/embedded.mobileprovision&amp;#10;cp $PROFILE_PATH/IPA_WIDGET_NEW_PROFILE.mobileprovision $TMP_PATH/Payload/mttlite.app/PlugIns/QQBrowserToday.appex/embedded.mobileprovision&amp;#10;cp $PROFILE_PATH/IPA_WATCH_NEW_PROFILE.mobileprovision $TMP_PATH/Payload/mttlite.app/Watch/mttlite\ WatchOS\ App.app/PlugIns/mttlite\ WatchOS\ App\ Extension.appex/embedded.mobileprovision&amp;#10;cp $PROFILE_PATH/IPA_WATCH_EXTENSION_NEW_PROFILE.mobileprovision $TMP_PATH/Payload/mttlite.app/Watch/mttlite\ WatchOS\ App.app/embedded.mobileprovision&amp;#10;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码里面只举例了iPA含有Widget以及WatchOS的情况，如果你还含有其他Extension，都需要替换对应旧的的Profile, 需要注意的是&lt;font color=&quot;#ff0000&quot;&gt;WatchOS包含的Plugins也需要对应替换。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;###修改Info.plist文件&lt;br&gt;如果上一步新的Profile和旧的Profile包含的Bundle Identifier不一致，那么就需要修改Info.plist的CFBundleIdentifier字段了，如果一致可以不用修改直接跳过此步。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;App&lt;/span&gt; Info.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NEW_BUNDLE_IDENTIFIER=`egrep -a -A 2 application-identifier &lt;span class=&quot;label&quot;&gt;$PROFILE_PATH&lt;/span&gt;/IPA_NEW_PROFILE.mobileprovision | grep string | sed -&lt;span class=&quot;keyword&quot;&gt;e&lt;/span&gt; &#39;s/&amp;lt;string&amp;gt;&lt;span class=&quot;comment&quot;&gt;//&#39; -e &#39;s/&amp;lt;\/string&amp;gt;//&#39; -e &#39;s/ //&#39; | awk &#39;&amp;#123;split($0,a,&quot;.&quot;); print a[2] &quot;.&quot; a[3] &quot;.&quot; a[4]&amp;#125;&#39;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/libexec/PlistBuddy -c &lt;span class=&quot;string&quot;&gt;&quot;Set :CFBundleIdentifier $NEW_BUNDLE_IDENTIFIER&quot;&lt;/span&gt; &lt;span class=&quot;label&quot;&gt;$tmp_path&lt;/span&gt;/Payload/mttlite.&lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt;/Info.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NEW_BUNDLE_IDENTIFIER=`egrep -a -A 2 application-identifier &lt;span class=&quot;label&quot;&gt;$PROFILE_PATH&lt;/span&gt;/IPA_WIDGET_NEW_PROFILE.mobileprovision | grep string | sed -&lt;span class=&quot;keyword&quot;&gt;e&lt;/span&gt; &#39;s/&amp;lt;string&amp;gt;&lt;span class=&quot;comment&quot;&gt;//&#39; -e &#39;s/&amp;lt;\/string&amp;gt;//&#39; -e &#39;s/ //&#39; | awk &#39;&amp;#123;split($0,a,&quot;.&quot;); print a[2] &quot;.&quot; a[3] &quot;.&quot; a[4] &quot;.&quot; a[5]&amp;#125;&#39;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/libexec/PlistBuddy -c &lt;span class=&quot;string&quot;&gt;&quot;Set :CFBundleIdentifier $NEW_BUNDLE_IDENTIFIER&quot;&lt;/span&gt; &lt;span class=&quot;label&quot;&gt;$tmp_path&lt;/span&gt;/Payload/mttlite.&lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt;/PlugIns/QQBrowserToday.appex/Info.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NEW_BUNDLE_IDENTIFIER=`egrep -a -A 2 application-identifier &lt;span class=&quot;label&quot;&gt;$PROFILE_PATH&lt;/span&gt;/IPA_WATCH_NEW_PROFILE.mobileprovision | grep string | sed -&lt;span class=&quot;keyword&quot;&gt;e&lt;/span&gt; &#39;s/&amp;lt;string&amp;gt;&lt;span class=&quot;comment&quot;&gt;//&#39; -e &#39;s/&amp;lt;\/string&amp;gt;//&#39; -e &#39;s/ //&#39; | awk &#39;&amp;#123;split($0,a,&quot;.&quot;); print a[2] &quot;.&quot; a[3] &quot;.&quot; a[4] &quot;.&quot; a[5]&amp;#125;&#39;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/libexec/PlistBuddy -c &lt;span class=&quot;string&quot;&gt;&quot;Set :CFBundleIdentifier $NEW_BUNDLE_IDENTIFIER&quot;&lt;/span&gt; &lt;span class=&quot;label&quot;&gt;$tmp_path&lt;/span&gt;/Payload/mttlite.&lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt;/Watch/mttlite\ WatchOS\ &lt;span class=&quot;keyword&quot;&gt;App&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt;/Info.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NEW_BUNDLE_IDENTIFIER=`egrep -a -A 2 application-identifier &lt;span class=&quot;label&quot;&gt;$WORKSPACE&lt;/span&gt;/profile/IPA_NEW_PROFILE.mobileprovision | grep string | sed -&lt;span class=&quot;keyword&quot;&gt;e&lt;/span&gt; &#39;s/&amp;lt;string&amp;gt;&lt;span class=&quot;comment&quot;&gt;//&#39; -e &#39;s/&amp;lt;\/string&amp;gt;//&#39; -e &#39;s/ //&#39; | awk &#39;&amp;#123;split($0,a,&quot;.&quot;); print a[2] &quot;.&quot; a[3] &quot;.&quot; a[4]&amp;#125;&#39;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/libexec/PlistBuddy -c &lt;span class=&quot;string&quot;&gt;&quot;Set :WKCompanionAppBundleIdentifier $NEW_BUNDLE_IDENTIFIER&quot;&lt;/span&gt; &lt;span class=&quot;label&quot;&gt;$tmp_path&lt;/span&gt;/Payload/mttlite.&lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt;/Watch/mttlite\ WatchOS\ &lt;span class=&quot;keyword&quot;&gt;App&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt;/Info.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NEW_BUNDLE_IDENTIFIER=`egrep -a -A 2 application-identifier &lt;span class=&quot;label&quot;&gt;$PROFILE_PATH&lt;/span&gt;/IPA_NEW_WATCH_EXTENSION_NEW_PROFILE.mobileprovision | grep string | sed -&lt;span class=&quot;keyword&quot;&gt;e&lt;/span&gt; &#39;s/&amp;lt;string&amp;gt;&lt;span class=&quot;comment&quot;&gt;//&#39; -e &#39;s/&amp;lt;\/string&amp;gt;//&#39; -e &#39;s/ //&#39; | awk &#39;&amp;#123;split($0,a,&quot;.&quot;); print a[2] &quot;.&quot; a[3] &quot;.&quot; a[4] &quot;.&quot; a[5] &quot;.&quot; a[6]&amp;#125;&#39;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/libexec/PlistBuddy -c &lt;span class=&quot;string&quot;&gt;&quot;Set :CFBundleIdentifier $NEW_BUNDLE_IDENTIFIER&quot;&lt;/span&gt; &lt;span class=&quot;label&quot;&gt;$tmp_path&lt;/span&gt;/Payload/mttlite.&lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt;/Watch/mttlite\ WatchOS\ &lt;span class=&quot;keyword&quot;&gt;App&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt;/PlugIns/mttlite\ WatchOS\ &lt;span class=&quot;keyword&quot;&gt;App&lt;/span&gt;\ Extension.appex/Info.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NEW_BUNDLE_IDENTIFIER=`egrep -a -A 2 application-identifier &lt;span class=&quot;label&quot;&gt;$PROFILE_PATH&lt;/span&gt;/IPA_WATCH_NEW_PROFILE.mobileprovision | grep string | sed -&lt;span class=&quot;keyword&quot;&gt;e&lt;/span&gt; &#39;s/&amp;lt;string&amp;gt;&lt;span class=&quot;comment&quot;&gt;//&#39; -e &#39;s/&amp;lt;\/string&amp;gt;//&#39; -e &#39;s/ //&#39; | awk &#39;&amp;#123;split($0,a,&quot;.&quot;); print a[2] &quot;.&quot; a[3] &quot;.&quot; a[4] &quot;.&quot; a[5]&amp;#125;&#39;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/libexec/PlistBuddy -c &lt;span class=&quot;string&quot;&gt;&quot;Set :NSExtension:NSExtensionAttributes:WKAppBundleIdentifier $NEW_BUNDLE_IDENTIFIER&quot;&lt;/span&gt; &lt;span class=&quot;label&quot;&gt;$tmp_path&lt;/span&gt;/Payload/mttlite.&lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt;/Watch/mttlite\ WatchOS\ &lt;span class=&quot;keyword&quot;&gt;App&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;app&lt;/span&gt;/PlugIns/mttlite\ WatchOS\ &lt;span class=&quot;keyword&quot;&gt;App&lt;/span&gt;\ Extension.appex/Info.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;egrep这个命令是直接从Profile里面解析出对应的Bundile Identifier，避免需要人工输入或者指定，如果你已经明确知道是什么了，可以手动直接填写就好。这里需要特别特别注意的是，&lt;font color=&quot;#ff0000&quot;&gt;不管是WatchOS 1还是WatchOS 2都需要在Info.plist文件里面修改两处字段，Watch App需要指定除CFBundleIdentifier以外的WKCompanionAppBundleIdentifier这个字段，这个字段对应主App的CFBundleIdentifier，Watch Extension需要指定除了CFBundleIdentifier以外的NSExtension下NSExtensionAttributes的WKAppBundleIdentifier字段，这个字段对应Watch App的CFBundleIdentifier。&lt;/font&gt;同样如果你还有其他Extension也需要修改。&lt;/p&gt;
&lt;p&gt;###生成Entitlements&lt;br&gt;Entitlements主要是配合签名来用的，Profile里其实已经包含了Entitlements信息，所以完全不需要另外指定，直接生成即可。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/libexec/PlistBuddy -x -c &amp;#34;print :Entitlements &amp;#34; /dev/stdin &amp;#60;&amp;#60;&amp;#60; $(security cms -D -i $PROFILE_PATH/IPA_NEW_PROFILE.mobileprovision) &amp;#62; $TMP_PATH/IPA_NEW_ENTITLEMENTS.entitlements&amp;#10;/usr/libexec/PlistBuddy -x -c &amp;#34;print :Entitlements &amp;#34; /dev/stdin &amp;#60;&amp;#60;&amp;#60; $(security cms -D -i $PROFILE_PATH/IPA_WIDGET_NEW_PROFILE.mobileprovision) &amp;#62; $TMP_PATH/IPA_WIDGET_NEW_ENTITLEMENTS.entitlements&amp;#10;&amp;#10;/usr/libexec/PlistBuddy -x -c &amp;#34;print :Entitlements &amp;#34; /dev/stdin &amp;#60;&amp;#60;&amp;#60; $(security cms -D -i $PROFILE_PATH/IPA_WATCH_NEW_PROFILE.mobileprovision) &amp;#62; $TMP_PATH/IPA_WATCH_NEW_ENTITLEMENTS.entitlements&amp;#10;/usr/libexec/PlistBuddy -x -c &amp;#34;print :Entitlements &amp;#34; /dev/stdin &amp;#60;&amp;#60;&amp;#60; $(security cms -D -i $PROFILE_PATH/IPA_WATCH_EXTENSION_NEW_PROFILE.mobileprovision) &amp;#62; $TMP_PATH/IPA_WATCH_EXTENSION_NEW_ENTITLEMENTS.entitlements&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成的文件以.entitlements文件结尾。&lt;/p&gt;
&lt;p&gt;###签名&lt;br&gt;在签名之前，在钥匙串里面找到对应的证书，点击鼠标右键，显示简介，在弹出的信息面板里面复制常用名称，一般类似这样“iPhone Distribution: xxx (xxxxxx)”&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;codesign -f -s &amp;#34;iPhone Distribution: xxx (xxxxxx)&amp;#34; --entitlements $TMP_PATH/IPA_WATCH_EXTENSION_NEW_ENTITLEMENTS.entitlements $TMP_PATH/Payload/mttlite.app/Watch/mttlite\ WatchOS\ App.app/PlugIns/mttlite\ WatchOS\ App\ Extension.appex&amp;#10;codesign -f -s &amp;#34;iPhone Distribution: xxx (xxxxxx)&amp;#34; --entitlements $TMP_PATH/IPA_WATCH_NEW_ENTITLEMENTS.entitlements $TMP_PATH/Payload/mttlite.app/Watch/mttlite\ WatchOS\ App.app &amp;#10;codesign -f -s &amp;#34;iPhone Distribution: xxx (xxxxxx)&amp;#34; --entitlements $TMP_PATH/IPA_WIDGET_NEW_ENTITLEMENTS.entitlements $TMP_PATH/Payload/mttlite.app/PlugIns/QQBrowserToday.appex&amp;#10;codesign -f -s &amp;#34;iPhone Distribution: xxx (xxxxxx)&amp;#34; --entitlements $TMP_PATH/IPA_NEW_ENTITLEMENTS.entitlements $TMP_PATH/Payload/mttlite.app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里一定要注意的是，&lt;font color=&quot;#ff0000&quot;&gt;一定要自下往上签，比如包含WatchOS2的，一定要先签Watch Extension在签Watch App的，最后签名iPA的，否则会出现安装失败。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;###压缩iPA&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd $TMP_PATH&amp;#10;# &amp;#21024;&amp;#38500;&amp;#20020;&amp;#26102;&amp;#30340;entitlements&amp;#25991;&amp;#20214;&amp;#10;find $TMP_PATH -name &amp;#34;*.entitlements&amp;#34; -exec rm -f &amp;#123;&amp;#125; \; &amp;#10;zip -qr $IPA_PATH .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##写在最后&lt;br&gt;上面是拿一个拥有WatchOS 2和Widget这两个Extension的iPA为例子，如果你的iPA还拥有其他或者不同于例子的，你可以适当修改一下代码即可。&lt;br&gt;参照步骤的同时，一定要留意文章中红色部分，如果在安装过程中依然失败，可以通过Xcode菜单Window—&amp;gt;Device查看安装Log。&lt;/p&gt;
&lt;p&gt;####相关参考：&lt;br&gt;&lt;a href=&quot;https://medium.com/@ssowonny/resigning-ios-app-ipa-with-multiple-targets-and-provisioning-profiles-d868e5a9f70f#.ep6vwf45r&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Resigning iOS App IPA with multiple targets and provisioning profiles.&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://gist.github.com/catmac/1682965&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Extra bundle identifier from provision file&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;日常iOS开发都会遇到这样的需求，如何通过脚本动态修改IPA的Bundle ID从而实现一机多包呢？实际上现在很多开源的App已经可以满足这样的需求，比如&lt;a href=&quot;https://github.com/maciekish/iReSign&quot;&gt;iReSign&lt;/a&gt;，或者如果你愿意付费的话甚至可以购买拥有漂亮GUI的&lt;a href=&quot;https://www.airsignapp.com&quot;&gt;AirSign&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;AirSign没有用过，但是iReSign只支持单Target，意思就是你的iPA不能拥有任何Extension,比如Widget，Share,或者Watch等，并且iReSign使用起来需要指定Entitlements这样的文件，如果你是个新手或者对签名打包没有太多经验的开发GGMM，你肯定会问Entitlements是个什么鬼! 所以如果你只是想快速解决你的打包重签问题的话，这篇文章可以帮到你。&lt;/p&gt;
&lt;p&gt;##准备&lt;/p&gt;
&lt;p&gt;在重签之前，你需要准备除了iPA之外的两个东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;证书&lt;/li&gt;
&lt;li&gt;每个Target对应的Provisioning Profiles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;证书可以通过Mac自带&lt;strong&gt;钥匙串.app&lt;/strong&gt;查看是否有安装，&lt;strong&gt;Provisioning Profile&lt;/strong&gt;可以通过&lt;a href=&quot;https://developer.apple.com&quot;&gt;Apple Member Center&lt;/a&gt;创建并生成。如果你的iPA拥有多个Target，那么就需要为每个Target生成对应的Profile。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发,iPA重签,修改Bundle Id" scheme="http://penny.li/tags/iOS%E5%BC%80%E5%8F%91-iPA%E9%87%8D%E7%AD%BE-%E4%BF%AE%E6%94%B9Bundle-Id/"/>
    
  </entry>
  
  <entry>
    <title>iTunesLyricApp iTunes歌词插件App</title>
    <link href="http://penny.li/2015/12/07/iTunesLyricApp/"/>
    <id>http://penny.li/2015/12/07/iTunesLyricApp/</id>
    <published>2015-12-07T14:06:09.000Z</published>
    <updated>2016-04-19T12:10:44.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xotxj.com1.z0.glb.clouddn.com/0060lm7Tgw1eyrgejgo9jj30sg0sg776.jpg?imageView/2/w/160/q/90&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为Mac上的iTunes写了一个动态获取歌词的插件类App， 会自动根据播放的歌曲去抓歌词并根据歌曲播放时间轴显示歌词.&lt;/p&gt;
&lt;p&gt;GitHub地址：&lt;a href=&quot;https://github.com/iampennyli/iTunesLyricApp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTunesLyricApp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;歌词主要是从&lt;a href=&quot;music.163.com&quot;&gt;网易云音乐&lt;/a&gt;抓取，可能会因为cookie导致抓取失败。&lt;/li&gt;
&lt;li&gt;智能获取歌词可能会匹配错误。&lt;/li&gt;
&lt;li&gt;如果播放的iTunes Music没有缓存可能会检测不到歌曲。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对第二点和第三点可以手动查找然后倒入歌词解决。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如果使用中有啥问题，可以直接在下反馈给我，会不定期更新和维护，甚至你也可以帮忙修改一下代码。&lt;/p&gt;
&lt;p&gt;直接看截图把&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/0060lm7Tgw1eyrfy2c3v7j30zk0m816t.jpg&quot; alt=&quot;4&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/0060lm7Tgw1eyrfxmiaooj30jo0be42n.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/0060lm7Tgw1eyrfxasawwj30im0d1dj9.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/0060lm7Tgw1eyrfxgeq1wj30n20giag0.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xotxj.com1.z0.glb.clouddn.com/0060lm7Tgw1eyrgejgo9jj30sg0sg776.jpg?imageView/2/w/160/q/90&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为Mac上的iTunes写了一个动态获取歌词的插件类App， 会自动根据播放的歌曲去抓歌词并根据歌曲播放时间轴显示歌词.&lt;/p&gt;
&lt;p&gt;GitHub地址：&lt;a href=&quot;https://github.com/iampennyli/iTunesLyricApp&quot;&gt;iTunesLyricApp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;歌词主要是从&lt;a href=&quot;music.163.com&quot;&gt;网易云音乐&lt;/a&gt;抓取，可能会因为cookie导致抓取失败。&lt;/li&gt;
&lt;li&gt;智能获取歌词可能会匹配错误。&lt;/li&gt;
&lt;li&gt;如果播放的iTunes Music没有缓存可能会检测不到歌曲。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对第二点和第三点可以手动查找然后倒入歌词解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iTunes歌词显示" scheme="http://penny.li/tags/iTunes%E6%AD%8C%E8%AF%8D%E6%98%BE%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>aTranslator Mac上小巧的简单的翻译神器</title>
    <link href="http://penny.li/2015/04/05/aTranslator/"/>
    <id>http://penny.li/2015/04/05/aTranslator/</id>
    <published>2015-04-05T03:00:00.000Z</published>
    <updated>2016-04-28T15:53:31.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/6cb9ee11gw1eykk323aswj20480480sl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;aTranslator是一款基于百度翻译的翻译小工具，具备翻译以及词典的功能，支持10多种语言相互间翻译，特别支持文言文以及粤语翻译，让你一秒钟写诗不再是梦。&lt;/p&gt;
&lt;p&gt;写一个翻译App的初衷一直都有，作为程序猿工作中难免会遇到一些不认识的单词，以前google没有被墙的时候用google translate就感觉特别麻烦，所以就想是否可以写一款基于google的app放在桌面上呢？等到自己动手开始做得时候google已经被gfw了，所以就只能先写了这款基于百度翻译的。百度翻译也有它强大的优势，比如支持关联百科，丰富的双语以及柯林斯例句，还有网络释义等等，在适应中国人学习英语的习惯这方面还是做得非常好的，目前aTranslator其实已经有解析这些东西了，但是还没有将功能开发出来，在后面的版本迭代里面会陆续提供上面说得那些功能。&lt;/p&gt;
&lt;p&gt;##hello&lt;br&gt;后来小伙伴提醒到，&lt;a href=&quot;http://translate.google.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;谷歌翻译中国&lt;/a&gt; 还可以继续使用，研究了一下，后面可能会考虑将google翻译的结果纳入到aTranslator里面。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;del&gt;目前aTranslator还在App Store审核之中，等到上线到Store的时候，我会更新一下下载链接。如果你有任何问题，可以在下面留言，我第一时间会回复你。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;aTranslator已经登陆Mac App Store，如果你有兴趣，可以&lt;a href=&quot;https://itunes.apple.com/us/app/atranslator/id980575167?ls=1&amp;amp;mt=12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载&lt;/a&gt;一个试试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xotxj.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-28%2023.40.29.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xotxj.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-28%2023.48.49.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/6cb9ee11gw1eykk323aswj20480480sl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;aTranslator是一款基于百度翻译的翻译小工具，具备翻译以及词典的功能，支持10多种语言相互间翻译，特别支持文言文以及粤语翻译，让你一秒钟写诗不再是梦。&lt;/p&gt;
&lt;p&gt;写一个翻译App的初衷一直都有，作为程序猿工作中难免会遇到一些不认识的单词，以前google没有被墙的时候用google translate就感觉特别麻烦，所以就想是否可以写一款基于google的app放在桌面上呢？等到自己动手开始做得时候google已经被gfw了，所以就只能先写了这款基于百度翻译的。百度翻译也有它强大的优势，比如支持关联百科，丰富的双语以及柯林斯例句，还有网络释义等等，在适应中国人学习英语的习惯这方面还是做得非常好的，目前aTranslator其实已经有解析这些东西了，但是还没有将功能开发出来，在后面的版本迭代里面会陆续提供上面说得那些功能。&lt;/p&gt;
&lt;p&gt;##hello&lt;br&gt;后来小伙伴提醒到，&lt;a href=&quot;http://translate.google.cn&quot;&gt;谷歌翻译中国&lt;/a&gt; 还可以继续使用，研究了一下，后面可能会考虑将google翻译的结果纳入到aTranslator里面。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
